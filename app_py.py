# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oG9iv8UngKd4km89_vBX1xVpq0eBg4ie
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

# âœ… Load a working JSON file (movie dataset for demonstration)
json_url = "https://raw.githubusercontent.com/vega/vega-datasets/main/data/movies.json"
df = pd.read_json(json_url)

# âœ… Inspect available columns
print("Available columns:", df.columns.tolist())

# âœ… Use 'Release_Date' if available, otherwise simulate a date column
if 'Release_Date' in df.columns:
    df['publish_time'] = pd.to_datetime(df['Release_Date'], errors='coerce')
elif 'Year' in df.columns:
    df['publish_time'] = pd.to_datetime(df['Year'], format='%Y', errors='coerce')
else:
    df['publish_time'] = pd.to_datetime('2000', format='%Y')  # fallback

# Extract year
df['year'] = df['publish_time'].dt.year

# Simulate abstract and journal columns
df['abstract'] = df['Title'].fillna('').astype(str)
df['abstract_word_count'] = df['abstract'].apply(lambda x: len(x.split()))
df['journal'] = df['Major Genre'].fillna('Unknown') # Corrected column name

# Filter data by year range
filtered_df = df[df['year'].between(2000, 2010)]

# Show sample data
print("\nðŸ“„ Sample Data:")
print(filtered_df[['Title', 'journal', 'year', 'abstract_word_count']].dropna().head(10))

# Publications by year
year_counts = filtered_df['year'].value_counts().sort_index()
plt.figure(figsize=(8, 5))
plt.bar(year_counts.index, year_counts.values, color='skyblue')
plt.xlabel("Year")
plt.ylabel("Number of Publications")
plt.title("Publications Over Time (Simulated)")
plt.tight_layout()
plt.show()

# Top journals (genres)
top_journals = filtered_df['journal'].value_counts().head(10)
plt.figure(figsize=(8, 5))
sns.barplot(y=top_journals.index, x=top_journals.values, palette="viridis")
plt.xlabel("Number of Papers")
plt.ylabel("Journal")
plt.title("Top Journals (Genres) Publishing Research")
plt.tight_layout()
plt.show()

# Word cloud of titles
title_text = ' '.join(filtered_df['Title'].dropna().astype(str).tolist())
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(title_text)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title("Word Cloud of Titles")
plt.tight_layout()
plt.show()